<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	<!-- 开启注解-->
	<context:annotation-config/>
	<!-- 扫描控制器之前的所有组件，与SpringMVC想法 -->
	<context:component-scan base-package="com.bingo">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	<!-- Spring 的配置文件，业务逻辑有关 -->
	<!-- 数据源，事务控制，XXX -->
	
	
	
	<!-- ====================数据源的配置==================== -->
	<context:property-placeholder location="classpath:dbcofig.properties"/>
	<bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	<!-- ================================================== -->
	
	
	
	<!-- ====================配置和MyBatis的整合==================== -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定mybatis全局配置文件的位置 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="dataSource" ref="pooledDataSource"></property>
		<!-- 指定mybatis mapper文件的位置 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
	</bean>
	
	<!-- 配置扫描器，将mybatis接口的实现加入到ioc容器中, mybatis接口的实现是一个代理对象-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描所有dao接口的实现，加入到ioc容器中 -->
		<property name="basePackage" value="com.bingo.crud.dao"></property>
	</bean>
	
	
	
	<!-- 配置一个可以批量插入的sqlSession -->
	<!-- 执行器类型 executorType为BATCH，表示批量插入-->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" ></constructor-arg>
		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	</bean>
	<!-- ================================================== -->
	
	
	

	
	<!-- ====================事务控制的配置（应熟练掌握）==================== -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 控制住数据源 -->
		<property name="dataSource" ref="pooledDataSource"></property>
	</bean>
	
	<!-- 开启基于注解的事务，或者使用xml配置形式的事务（推荐使用配置式） -->
	<aop:config>
		<!-- 切入点表达式,execution 中的表达式表示所有类下的所有方法 -->
		<aop:pointcut expression="execution(* com.crud.service..*(..))" id="txPoint"/>	
		<!-- 事务增强的配置 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
	</aop:config>
	
	<!--配置事务增强，事务如何切入  -->
	<tx:advice id="txAdvice">
		<tx:attributes>
		<!-- 所有方法都是事务方法 -->
			<tx:method name="*"/>
		<!-- 所有get方法,查询，只读，提升效率 -->
			<tx:method name="get*" read-only="true"/>		
		</tx:attributes>
	</tx:advice>
	
	<!-- Spring 配置文件的核心点 （数据源，与mybatis的整合，事务控制）-->

</beans>
